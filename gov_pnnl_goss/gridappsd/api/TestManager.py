from abc import ABC, abstractmethod
from typing import List, Dict
from gov_pnnl_goss.core.DataResponse import DataResponse
from gov_pnnl_goss.core.Event import Event
from gov_pnnl_goss.gridappsd.api.ServiceManager import SimulationContext
from gov_pnnl_goss.gridappsd.dto.TestConfig import TestConfig


class TestManager(ABC):
    @abstractmethod
    def handle_test_request(self, test_config: TestConfig, simulation_context: SimulationContext):
        # This method receives test request from ProcessManager, checks request 
        # parameters and forwards them to be processed to specific methods.
        # other specific methods.
        # 
        # @param testConfig: Configuration containing test request.
        # @param simulation_context: Context information of currently running simulation.
        # @param rulePort: A unique port number generated by ProcessMananger for rule
        #                  engine if testConfig contains rules otherwise defaults to 0.
        pass

    @abstractmethod
    def send_events_to_simulation(self, events: List[Event], simulation_id: str) -> List[Event]:
        # This method injects Events in a currently running simulation. 
        # @param events List of Event objects
        # @param simulation_id Id of currently running simulation
        # @return 
        pass

    @abstractmethod
    def compare_simulations(self, test_config: TestConfig, simulation_id_one: str, simulation_id_two: str, request: DataResponse):
        # This method compares output from the currently running simulation with 
        # output from an older simulation. It publishes the comparison results on
        # the topic defined under GridappsdConstants'status topic_simulationTestOutput
        # variable.
        # @param testConfig 
        # @param simulationIdOne simulation id of currently running simulation
        # @param simulationIdTwo Simulation id of older simulation
        pass

    @abstractmethod
    def compare_timeseries_simulation_with_expected(self, test_config: TestConfig, current_simulation_id: str, simulation_id_one: str, expected_result_object: Dict, request: DataResponse):
        # @param testConfig
        # @param currentSimulationId
        # @param simulationIdOne
        # @param expectedResultObject
        # @param request
        pass

    @abstractmethod
    def compare_running_with_timeseries_simulation(self, test_config: TestConfig, current_simulation_id: str, simulation_id_one: str):
        # @param testConfig
        # @param currentSimulationId
        # @param simulationIdOne
        pass

    @abstractmethod
    def compare_running_simulation_output_with_expected(self, test_config: TestConfig, simulation_id: str, expected_results: Dict, expected_or_simulation_id_two: str):
        # This method compares simulation output with provided expected simulation
        # output.
        # @param simulation_id Id of the currently running simulation
        # @param expectedResults Expected simulation output 
        pass

    @abstractmethod
    def compare_running_simulation_input_with_expected(self, test_config: TestConfig, simulation_id: str, expected_results: Dict, expected_or_simulation_id_two: str):
        # This method compares simulation output with provided expected simulation
        # output.
        # @param simulation_id Id of the currently running simulation
        # @param expectedResults Expected simulation output 
        pass

    @abstractmethod
    def update_event_for_simulation(self, events: List[Event], simulation_id: str):
        # This method update property of existing events for the simulation if the events 
        # are not initiated yet.
        # @param events List of events to be updated
        # @param simulation_id Id of the currently running simulation
        pass

    @abstractmethod
    def send_event_status(self, simulation_id: str, reply_destination):
        # This method published status of events for the simulation_id
        # @param simulation_id Id of currently running simulation
        # @param replyDestination reply queue for the status
        pass
